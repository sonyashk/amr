pom:
<dependencies>
 	<dependency>
     	<groupId>mysql</groupId>
     	<artifactId>mysql-connector-java</artifactId>
     	<version>8.0.33</version>
 	</dependency>
 	<dependency>
     	<groupId>org.apache.poi</groupId>
     	<artifactId>poi-ooxml</artifactId>
     	<version>5.2.2</version>
 	</dependency>
 </dependencies>


java:
package org.example;

 import java.sql.*;
 import java.util.Scanner;
 import org.apache.poi.ss.usermodel.*;
 import org.apache.poi.xssf.usermodel.XSSFWorkbook;
 import java.io.FileOutputStream;
 import java.io.IOException;

 public class Task1 {

 	private static final String DB_URL = "jdbc:mysql://localhost:3306/task1db";
 	private static final String DB_USER = "root";
 	private static final String DB_PASSWORD = "root";

 	public static void main(String[] args) {
     	Scanner scanner = new Scanner(System.in);
     	Connection connection = null;

     	try {
         	connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
         	createTableIfNotExists(connection);

         	while (true) {
             	printMenu();
             	int choice = scanner.nextInt();
             	scanner.nextLine(); // Consume newline

             	switch (choice) {
                 	case 1:
                     	showAllTables(connection);
                     	break;
                 	case 2:
                     	createTable(connection);
                     	break;
                 	case 3:
                     	performOperation(connection, scanner, "Addition", (a, b) -> a + b);
                     	break;
                 	case 4:
                     	performOperation(connection, scanner, "Subtraction", (a, b) -> a - b);
                     	break;
                 	case 5:
                     	performOperation(connection, scanner, "Multiplication", (a, b) -> a * b);
                     	break;
                 	case 6:
                     	performOperation(connection, scanner, "Division", (a, b) -> a / b);
                     	break;
                	 case 7:
                     	performOperation(connection, scanner, "Modulus", (a, b) -> a % b);
                     	break;
                 	case 8:
                     	performOperation(connection, scanner, "Absolute", (a, b) -> Math.abs(a));
                     	break;
                 	case 9:
                     	performOperation(connection, scanner, "Power", (a, b) -> Math.pow(a, b));
                     	break;
                 	case 10:
                     	exportToExcel(connection);
                     	break;
                 	default:
                     	System.out.println("Invalid choice. Please try again.");
             	}
         	}
     	} catch (SQLException e) {
         	e.printStackTrace();
     	} finally {
         	if (connection != null) {
             	try {
                 	connection.close();
             	} catch (SQLException e) {
                 	e.printStackTrace();
             	}
         	}
         	scanner.close();
     	}
 	}

 	private static void printMenu() {
     	System.out.println("1. Вывести все таблицы из MySQL.");
     	System.out.println("2. Создать таблицу в MySQL.");
     	System.out.println("3. Сложение чисел, результат сохранить в MySQL с последующим выводом в консоль.");
     	System.out.println("4. Вычитание чисел, результат сохранить в MySQL с последующим выводом в консоль.");
     	System.out.println("5. Умножение чисел, результат сохранить в MySQL с последующим выводом в консоль.");
     	System.out.println("6. Деление чисел, результат сохранить в MySQL с последующим выводом в консоль.");
     	System.out.println("7. Деление чисел по модулю (остаток), результат сохранить в MySQL с последующим выводом в консоль.");
   	  System.out.println("8. Возведение числа в модуль, результат сохранить в MySQL с последующим выводом в консоль.");
     	System.out.println("9. Возведение числа в степень, результат сохранить в MySQL с последующим выводом в консоль.");
     	System.out.println("10. Сохранить все данные (вышеполученные результаты) из MySQL в Excel и вывести на экран.");
 	}

 	private static void createTableIfNotExists(Connection connection) throws SQLException {
     	String sql = "CREATE TABLE IF NOT EXISTS results (" +
             	"id INT AUTO_INCREMENT PRIMARY KEY," +
             	"operation VARCHAR(50)," +
             	"result DOUBLE" +
             	")";
     	try (Statement statement = connection.createStatement()) {
         	statement.execute(sql);
     	}
 	}

 	private static void showAllTables(Connection connection) throws SQLException {
     	String sql = "SHOW TABLES";
     	try (Statement statement = connection.createStatement();
          	ResultSet resultSet = statement.executeQuery(sql)) {
         	while (resultSet.next()) {
             	System.out.println(resultSet.getString(1));
         	}
     	}
 	}

 	private static void createTable(Connection connection) throws SQLException {
     	String tableName = "new_table";
     	String sql = "CREATE TABLE " + tableName + " (" +
             	"id INT AUTO_INCREMENT PRIMARY KEY," +
             	"data VARCHAR(255)" +
             	")";
     	try (Statement statement = connection.createStatement()) {
         	statement.execute(sql);
         	System.out.println("Table " + tableName + " created successfully.");
     	}
 	}

 	private static void performOperation(Connection connection, Scanner scanner, String operation, Operation op) throws SQLException {
     	System.out.print("Enter first number: ");
     	double a = scanner.nextDouble();
     	System.out.print("Enter second number: ");
     	double b = scanner.nextDouble();
     	double result = op.apply(a, b);

     	String sql = "INSERT INTO results (operation, result) VALUES (?, ?)";
     	try (PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
         	preparedStatement.setString(1, operation);
         	preparedStatement.setDouble(2, result);
             preparedStatement.executeUpdate();
     	}

     	System.out.println("Result of " + operation + ": " + result);
 	}

 	private static void exportToExcel(Connection connection) throws SQLException {
     	String sql = "SELECT * FROM results";
     	try (Statement statement = connection.createStatement();
          	ResultSet resultSet = statement.executeQuery(sql)) {

         	Workbook workbook = new XSSFWorkbook();
         	Sheet sheet = workbook.createSheet("Results");

         	Row header = sheet.createRow(0);
         	header.createCell(0).setCellValue("ID");
         	header.createCell(1).setCellValue("Operation");
         	header.createCell(2).setCellValue("Result");

   	      int rowNum = 1;
         	while (resultSet.next()) {
             	Row row = sheet.createRow(rowNum++);
             	row.createCell(0).setCellValue(resultSet.getInt("id"));
             	row.createCell(1).setCellValue(resultSet.getString("operation"));
             	row.createCell(2).setCellValue(resultSet.getDouble("result"));
         	}

         	try (FileOutputStream fileOut = new FileOutputStream("results.xlsx")) {
             	workbook.write(fileOut);
         	}

    	     workbook.close();
         	System.out.println("Data exported to results.xlsx");
     	} catch (IOException e) {
         	e.printStackTrace();
     	}
 	}

 	@FunctionalInterface
 	interface Operation {
     	double apply(double a, double b);
 	}
 }



